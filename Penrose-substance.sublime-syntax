%YAML 1.2
---
name: Penrose Substance
scope: source.penrose.substance

file_extensions:
  - substance

variables:
  name: \b[a-zA-Z_]\w*\b

contexts:
  main:
    - include: comment
    - include: string
    - include: string_latex

    - match: \b(Label|AutoLabel|NoLabel)\b
      scope: keyword.declaration.label.penrose.substance
    - match: \b(All|None)\b
      scope: keyword.other.penrose.substance

    - match: \b(for)\b
      scope: keyword.control.loop.for.penrose.substance
      push:
        - meta_scope: source.for.penrose.substance
        - match: \s*({{name}})\s+(in)\s+
          captures:
            1: variable.parameter.penrose.substance
            2: keyword.control.penrose.substance
        - include: expression
        - match: \b(where)\b
          scope: keyword.control.conditional.select.penrose.substance
          pop: true
        - match: $
          pop: true

    - match: \b({{name}})\s*(?=\()
      captures:
        1: variable.function.penrose.substance

    - match: ^\s*(((Let)|({{name}}))\s+)?({{name}})\s*(:=)\s*
      captures:
        3: keyword.declaration.penrose.substance
        4: storage.type.penrose.substance
        5: entity.name.constant.penrose.substance
        6: keyword.operator.assignment.penrose.substance

    - match: ^\s*(({{name}})\s+)?({{name}})
      captures:
        2: storage.type.penrose.substance
        3: entity.name.constant.penrose.substance
      push:
        - match: \s*(,)\s*({{name}})
          captures:
            1: punctuation.separator.sequence.penrose.substance
            2: entity.name.constant.penrose.substance
        - include: comment
        - include: string
        - include: string_latex
        - match: (?=$)
          pop: true

    - include: expression



  expression:
    - include: operators

    - match: '\b(true|false)\b'
      scope: constant.language.boolean.penrose.substance

    - include: number

  operators:
    - match: ([-+*/%^]|\bmod\b)
      scope: keyword.operator.arithmetic.penrose.substance
    - match: (==|!=|<|>|<=|>=)
      scope: keyword.operator.comparison.penrose.substance
    - match: (\&\&|\|\||!)
      scope: keyword.operator.logical.penrose.substance



  comment:
    - match: --
      scope: comment.line.penrose.substance
      push:
        - meta_scope: comment.line.penrose.substance
        - match: \b(TODO|FIXME|XXX|NOTE)\b
          scope: comment.keyword.penrose.substance
        - match: $
          pop: true

  string:
    - match: '"'
      scope: string.quoted.double.penrose.substance
      push:
        - meta_scope: string.quoted.double.penrose.substance
        - match: \\.
          scope: constant.character.escape.penrose.substance
        - match: '"'
          pop: true

  string_latex:
    - match: '\$'
      scope: string.quoted.other.latex.penrose.substance
      push:
        - match: '\$'
          scope: string.quoted.other.latex.penrose.substance
          pop: true
        - include: scope:source.latex

  number:
    - match: |-
        (?ix) # hexadecimal color literal
          (\#) # prefix
          \b
          [0-9a-f]++ # iterate over number characters
          \b (?!\.)
      scope: constant.numeric.color.hexadecimal.penrose.substance
      captures:
        1: constant.numeric.other.prefix.penrose.substance

    - match: |-
        (?ix)  # hexadecimal float literal
          [+\-]? # optional number sign
          \b
          # special text
          (inf|nan)
          \b
      scope: constant.numeric.float.special.penrose.substance

    - match: |-
        (?ix)  # hexadecimal float literal
          [+\-]? # optional number sign
          \b
          (0x) # prefix
          # significand
          (?: (\.) (?=p)  # invalid
            |        [0-9a-f]*+ ([0-9a-z]*?) [0-9a-f]*+
              (?: \. [0-9a-f]*+ ([0-9a-z.]*?) [0-9a-f]*+ )? )
          # exponent (required)
          (?: (p) (?:        [+\-]  [0-9]++ ([0-9a-z]*?)
                    | (?=[0-9a-z.]) [0-9]*+ ([0-9a-z.]*?) )
            | (p) )
          # remaining valid chars and type specifier suffix
          [0-9]*+ (f?)
          \b (?!\.)
      scope: constant.numeric.float.hexadecimal.penrose.substance
      captures:
        1: constant.numeric.other.prefix.penrose.substance
        2: invalid.illegal.number.missing-fragment.significand.penrose.substance
        3: invalid.illegal.numeric-literal-character.float.whole-number.penrose.substance
        4: invalid.illegal.numeric-literal-character.float.fraction.penrose.substance
        5: keyword.other.exponent.hexadecimal.penrose.substance
        6: invalid.illegal.numeric-literal-character.float.exponent.penrose.substance
        7: invalid.illegal.numeric-literal-character.float.exponent.penrose.substance
        8: invalid.illegal.number.missing-fragment.exponent.penrose.substance
        9: constant.numeric.other.suffix.penrose.substance
    - match: |-
        (?ix)  # hexadecimal float literal, without required exponent
          [+\-]? # optional number sign
          \b
          (0x) # prefix
          # significand (at least a period)
               [0-9a-f]*+ ([0-9a-z&&[^p]]*?) [0-9a-f]*+
          (\.) [0-9a-f]*+ ([0-9a-z.&&[^p]]*?) [0-9a-f]*+
          (?:(?<=\.)|\b) (?!\.)
      scope: constant.numeric.float.hexadecimal.penrose.substance
      captures:
        1: constant.numeric.other.prefix.penrose.substance
        2: invalid.illegal.numeric-literal-character.float.whole-number.penrose.substance
        3: constant.numeric.other.decimalpoint.penrose.substance
        4: invalid.illegal.numeric-literal-character.float.fraction.penrose.substance
    - match: |-
        (?ix)  # decimal float literal
          [+\-]? # optional number sign
          (?!0x) # prefix
          \b
          # significand (at least a period)
               [0-9]++ ([0-9a-z&&[^e]]*?) [0-9]*+
          (\.) [0-9]*+ ([0-9a-z.&&[^e]]*?) [0-9]*+
          # exponent (optional)
          (?: (e) (?: [+\-]  [0-9]++ ([0-9a-z]*?)
                    |        [0-9]++ ([0-9a-z.]*?) )
            | ( p     [+\-]? [0-9]++
              | [ep]                  [0-9a-z.]*?) )?
          (?:(?<=\.)|\b) (?!\.)
      scope: constant.numeric.float.decimal.penrose.substance
      captures:
        1: invalid.illegal.numeric-literal-character.float.whole-number.penrose.substance
        2: constant.numeric.other.decimalpoint.penrose.substance
        3: invalid.illegal.numeric-literal-character.float.whole-number.penrose.substance
        4: keyword.other.exponent.decimal.penrose.substance
        5: invalid.illegal.numeric-literal-character.float.exponent.penrose.substance
        6: invalid.illegal.numeric-literal-character.float.exponent.penrose.substance
        7: invalid.illegal.numeric-literal-character.float.exponent.penrose.substance
    - match: |-
        (?ix)  # decimal float literal
          [+\-]? # optional number sign
          (?!0x) # prefix
          # significand (at least a period)
          (\.) [0-9]++ ([0-9a-z.&&[^e]]*?) [0-9]*+
          # exponent (optional)
          (?: (e) (?: [+\-]  [0-9]++ ([0-9a-z]*?)
                    |        [0-9]++ ([0-9a-z.]*?) )
            | ( p     [+\-]? [0-9]++
              | [ep]                  [0-9a-z.]*?) )?
          (?:(?<=\.)|\b) (?!\.)
      scope: constant.numeric.float.decimal.penrose.substance
      captures:
        1: constant.numeric.other.decimalpoint.penrose.substance
        2: invalid.illegal.numeric-literal-character.float.whole-number.penrose.substance
        3: keyword.other.exponent.decimal.penrose.substance
        4: invalid.illegal.numeric-literal-character.float.exponent.penrose.substance
        5: invalid.illegal.numeric-literal-character.float.exponent.penrose.substance
        6: invalid.illegal.numeric-literal-character.float.exponent.penrose.substance
    - match: |-
        (?ix) # zero
          [+\-]? # optional number sign
          \b
          (0[xbo])? # prefix
          0++ # iterate over number characters
          \b (?!\.)
      scope: constant.numeric.integer.zero.penrose.substance
      captures:
        1: constant.numeric.other.prefix.penrose.substance
    - match: |-
        (?ix) # invalid (empty) number literal
          [+\-]? # optional number sign
          \b
          (?: (0x) | (0b) ) # prefix
          \b (?!\.)
      scope: invalid.illegal.invalid-number-literal.penrose.substance
    - match: |-
        (?ix) # hexadecimal integer literal
          [+\-]? # optional number sign
          \b
          (0x) # prefix
          [0-9a-f]++ # iterate over number characters
          \b (?!\.)
      scope: constant.numeric.integer.hexadecimal.penrose.substance
      captures:
        1: constant.numeric.other.prefix.penrose.substance
    - match: |-
        (?ix) # binary integer literal
          [+\-]? # optional number sign
          \b
          (0b) # prefix
          [01]++ # iterate over number characters
          \b (?!\.)
      scope: constant.numeric.integer.binary.penrose.substance
      captures:
        1: constant.numeric.other.prefix.penrose.substance
    - match: |-
        (?ix) # octal integer literal
          [+\-]? # optional number sign
          \b
          (0|0o) # prefix
          [0-7]++ # iterate over number characters
          \b (?!\.)
      scope: constant.numeric.integer.octal.penrose.substance
      captures:
        1: constant.numeric.other.prefix.penrose.substance
    - match: |-
        (?ix) # decimal integer literal
          [+\-]? # optional number sign
          \b
          [0-9]++ # iterate over number characters
          \b (?!\.)
      scope: constant.numeric.integer.decimal.penrose.substance
